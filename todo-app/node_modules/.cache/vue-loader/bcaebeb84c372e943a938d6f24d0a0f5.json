{"remainingRequest":"/Users/quentin/Downloads/todocopy/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/quentin/Downloads/todocopy/todo-app/components/Todo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/quentin/Downloads/todocopy/todo-app/components/Todo.vue","mtime":1601668068000},{"path":"/Users/quentin/Downloads/todocopy/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/quentin/Downloads/todocopy/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Task from './Task.vue'\nimport draggable from 'vuedraggable';\nimport { today, tomorrow } from '../shared'\nexport default {\n  components: {\n    Task,draggable\n  },\n  data () {\n        return {\n          editing: false,\n        }\n  },\n  props: {\n    todo: {\n      type: Object,\n      required: true\n    },\n    selected: {\n      type: Boolean\n    }\n  },\n  computed: {\n    color () {\n      return (this.todo && this.todo.colors) ? this.todo.colors[0] : '#ff6262';\n    },\n    progress () {\n      const totalCount = this.todo.tasks.filter(t => !t.deleted).length\n      const doneCount = this.todo.tasks.filter(t => !t.deleted && t.done).length\n      return totalCount > 0 ? `${Math.round((doneCount / totalCount) * 100)}%` : 0;\n    },\n    progressColor () {\n      const colorLeft = `color-stop(30%, ${(this.todo && this.todo.colors) ? this.todo.colors[0] : '#ff6262'})`\n      const colorRight = `to(${(this.todo && this.todo.colors) ? this.todo.colors[1] : '#ffa947'})`\n      return `-webkit-gradient(linear, left bottom, right bottom, ${colorLeft}, ${colorRight})`\n    },\n    todayTasks () {\n      return this.todo.tasks.filter(task => {\n        return task.date >= today && task.date < tomorrow\n      })\n    },\n    tomorrowTasks () {\n      return this.todo.tasks.filter(task => {\n        return task.date >= tomorrow\n      })\n    },\n    outdatedTasks () {\n      return this.todo.tasks.filter(task => {\n        return task.date < today\n      })\n    }\n  },\n  methods: {\n    enable_editing(){\n      this.editing = true;\n    },\n    save_editing(){\n      this.editing = false;\n    },\n    handleClick () {\n      const appRect = document.querySelector('#app').getBoundingClientRect()\n      const elRect = this.$el.getBoundingClientRect()\n      const todo = this.todo\n      const rect = {}\n      rect.top = elRect.top - appRect.top\n      rect.left = elRect.left - appRect.left\n      rect.width = elRect.width\n      rect.height = elRect.height\n      rect.appWidth = appRect.width\n      rect.appHeight = appRect.height\n      this.$emit('select', { rect, todo })\n    }\n  }\n}\n",{"version":3,"sources":["Todo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Todo.vue","sourceRoot":"components","sourcesContent":["<template>\n  <div class=\"todo\" :class=\"{ todo__selected: selected }\">\n    <div class=\"todo_head\" @click=\"handleClick\">\n      <div class=\"todo_icon\" :style=\"{ color }\">\n        <i :class=\"['fa', `fa-${todo.icon}`]\"></i>\n      </div>\n      <div class=\"todo_menu\"><i class=\"fa fa-ellipsis-v\"></i></div>\n    </div>\n    <div class=\"todo_body\">\n      <p class=\"todo_tips\" v-if=\"todo.tasks\">{{ todo.tasks.length }} Tasks</p>\n      <h3 class=\"todo_title\" v-if=\"editing == false\">{{ todo.name }} <i v-if=\"selected != null\" @click=\"enable_editing\" class=\"fa fa-pencil-square-o\"></i></h3>\n      <h3 class=\"todo_title\" v-if=\"editing == true\"><input class=\"editing_toggles\" v-model=\"todo.name\" /><i v-if=\"selected != null\" @click=\"save_editing\" class=\"fa fa-save\"></i></h3>\n      <div class=\"todo_progress\">\n        <span class=\"todo_progress_line\">\n          <i :style=\"{ width: progress, backgroundImage: progressColor }\"></i>\n        </span>\n        <span class=\"todo_progress_num\">{{ progress }}</span>\n      </div>\n      <div class=\"todo_tasks\">\n        <h4 class=\"todo_subtitle\" v-if=\"todayTasks.length\">Today</h4>\n        <ul class=\"columns\">\n          <draggable v-model=\"todo.tasks\">\n          <li v-for=\"task in todayTasks\" :key=\"task.id\" class=\"column\"> \n            <task :todo=\"todo\" :task=\"task\" />\n          </li>\n        </draggable>\n        </ul>\n        <h4 class=\"todo_subtitle\" v-if=\"tomorrowTasks.length\">Tomorrow</h4>\n        <ul>\n          <draggable v-model=\"todo.tasks\">\n          <li v-for=\"task in tomorrowTasks\" :key=\"task.id\">\n            <task :todo=\"todo\" :task=\"task\" />\n          </li>\n          </draggable>\n        </ul>\n        <h4 class=\"todo_subtitle\" v-if=\"outdatedTasks.length\">Outdated</h4>\n        <ul>\n          <draggable v-model=\"todo.tasks\">\n          <li v-for=\"task in outdatedTasks\" :key=\"task.id\">\n            <task :todo=\"todo\" :task=\"task\" />\n          </li>\n          </draggable>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Task from './Task.vue'\nimport draggable from 'vuedraggable';\nimport { today, tomorrow } from '../shared'\nexport default {\n  components: {\n    Task,draggable\n  },\n  data () {\n        return {\n          editing: false,\n        }\n  },\n  props: {\n    todo: {\n      type: Object,\n      required: true\n    },\n    selected: {\n      type: Boolean\n    }\n  },\n  computed: {\n    color () {\n      return (this.todo && this.todo.colors) ? this.todo.colors[0] : '#ff6262';\n    },\n    progress () {\n      const totalCount = this.todo.tasks.filter(t => !t.deleted).length\n      const doneCount = this.todo.tasks.filter(t => !t.deleted && t.done).length\n      return totalCount > 0 ? `${Math.round((doneCount / totalCount) * 100)}%` : 0;\n    },\n    progressColor () {\n      const colorLeft = `color-stop(30%, ${(this.todo && this.todo.colors) ? this.todo.colors[0] : '#ff6262'})`\n      const colorRight = `to(${(this.todo && this.todo.colors) ? this.todo.colors[1] : '#ffa947'})`\n      return `-webkit-gradient(linear, left bottom, right bottom, ${colorLeft}, ${colorRight})`\n    },\n    todayTasks () {\n      return this.todo.tasks.filter(task => {\n        return task.date >= today && task.date < tomorrow\n      })\n    },\n    tomorrowTasks () {\n      return this.todo.tasks.filter(task => {\n        return task.date >= tomorrow\n      })\n    },\n    outdatedTasks () {\n      return this.todo.tasks.filter(task => {\n        return task.date < today\n      })\n    }\n  },\n  methods: {\n    enable_editing(){\n      this.editing = true;\n    },\n    save_editing(){\n      this.editing = false;\n    },\n    handleClick () {\n      const appRect = document.querySelector('#app').getBoundingClientRect()\n      const elRect = this.$el.getBoundingClientRect()\n      const todo = this.todo\n      const rect = {}\n      rect.top = elRect.top - appRect.top\n      rect.left = elRect.left - appRect.left\n      rect.width = elRect.width\n      rect.height = elRect.height\n      rect.appWidth = appRect.width\n      rect.appHeight = appRect.height\n      this.$emit('select', { rect, todo })\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.editing_toggles{\n      width: 90%;\n    height: 100%;\n    font-size: 22px;\n}\n.fa-save{\n  width: 10%;\n    margin: 1px 4px;\n}\n.fa-pencil-square-o{\n      font-size: 19px;\n    margin: 15px 9px;\n}\n.todo {\n  flex: 1;\n  margin: 0 8px;\n  overflow: hidden;\n  box-shadow: 0 10px 10px rgba(0, 0, 0, 0.2);\n  color: #666;\n}\n.todo__selected {\n  visibility: hidden;\n}\n.todo_head {\n  display: flex;\n  padding: 20px;\n  height: 44px;\n  justify-content: space-between;\n  align-items: flex-start;\n  transform: translate3d(0, 0, 0);\n  will-change: transform;\n}\n.todo_body {\n  padding: 0 20px;\n  transform: translate3d(0, 189px, 0);\n  will-change: transform;\n}\n.todo_icon {\n  display: flex;\n  width: 44px;\n  height: 44px;\n  border: 1px solid #eee;\n  border-radius: 100%;\n  justify-content: center;\n  align-items: center;\n  font-size: 18px;\n}\n.todo_menu {\n  color: #eee;\n}\n.todo_tips {\n  opacity: 0.6;\n  font-size: 13px;\n  font-weight: 600;\n}\n.todo_title {\n  margin-top: 6px;\n  font-size: 32px;\n  display: inline-flex;\n}\n.todo_progress {\n  display: flex;\n  align-items: center;\n  margin-top: 30px;\n}\n.todo_progress_line {\n  margin-right: 10px;\n  flex: 1;\n  height: 3px;\n  background-color: #eee;\n\n  i {\n    display: block;\n    height: 100%;\n    transition: all 0.3s ease;\n  }\n}\n.todo_progress_num {\n  font-size: 12px;\n}\n.todo_tasks {\n  opacity: 0;\n  transform: scale3d(1, 0, 1);\n  // transform-origin: top;\n  // will-change: transform opacity;\n}\n.todo_subtitle {\n  margin-top: 32px;\n  margin-bottom: 8px;\n  color: #999;\n}\n</style>\nvar dragSrcEl = null;\n\nfunction handleDragStart(e) {\n  // Target (this) element is the source node.\n  dragSrcEl = this;\n\n  e.dataTransfer.effectAllowed = 'move';\n  e.dataTransfer.setData('text/html', this.outerHTML);\n\n  this.classList.add('dragElem');\n}\nfunction handleDragOver(e) {\n  if (e.preventDefault) {\n    e.preventDefault(); // Necessary. Allows us to drop.\n  }\n  this.classList.add('over');\n\n  e.dataTransfer.dropEffect = 'move';  // See the section on the DataTransfer object.\n\n  return false;\n}\n\nfunction handleDragEnter(e) {\n  // this / e.target is the current hover target.\n}\n\nfunction handleDragLeave(e) {\n  this.classList.remove('over');  // this / e.target is previous target element.\n}\n\nfunction handleDrop(e) {\n  // this/e.target is current target element.\n\n  if (e.stopPropagation) {\n    e.stopPropagation(); // Stops some browsers from redirecting.\n  }\n\n  // Don't do anything if dropping the same column we're dragging.\n  if (dragSrcEl != this) {\n    // Set the source column's HTML to the HTML of the column we dropped on.\n    //alert(this.outerHTML);\n    //dragSrcEl.innerHTML = this.innerHTML;\n    //this.innerHTML = e.dataTransfer.getData('text/html');\n    this.parentNode.removeChild(dragSrcEl);\n    var dropHTML = e.dataTransfer.getData('text/html');\n    this.insertAdjacentHTML('beforebegin',dropHTML);\n    var dropElem = this.previousSibling;\n    addDnDHandlers(dropElem);\n    \n  }\n  this.classList.remove('over');\n  return false;\n}\n\nfunction handleDragEnd(e) {\n  // this/e.target is the source node.\n  this.classList.remove('over');\n\n  /*[].forEach.call(cols, function (col) {\n    col.classList.remove('over');\n  });*/\n}\n\nfunction addDnDHandlers(elem) {\n  elem.addEventListener('dragstart', handleDragStart, false);\n  elem.addEventListener('dragenter', handleDragEnter, false)\n  elem.addEventListener('dragover', handleDragOver, false);\n  elem.addEventListener('dragleave', handleDragLeave, false);\n  elem.addEventListener('drop', handleDrop, false);\n  elem.addEventListener('dragend', handleDragEnd, false);\n\n}\n\nvar cols = document.querySelectorAll('#columns .column');\n[].forEach.call(cols, addDnDHandlers);\n\n"]}]}